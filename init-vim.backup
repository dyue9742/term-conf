syntax enable
filetype plugin indent on
set nocompatible
set encoding=utf-8
set fileencoding=utf-8
set cmdheight=2
set pumheight=10
set iskeyword+=-
set shortmess+=c
set completeopt=menu,menuone,noselect
set mouse=a
set t_Co=256
set cc=80
set number relativenumber
set splitbelow splitright
set tabstop=4 softtabstop=0
set shiftround shiftwidth=0
set hidden
set nowrap
set nobackup
set noswapfile
set noshowmode
set nowritebackup
set updatetime=300
set timeoutlen=500
set formatoptions-=cro

au! BufWritePre $MYVIMRC source %
autocmd BufWritePre * :%s/\s\+$//e
map <F7> gg=G<C-o><C-o>

call plug#begin()
" THEME
Plug 'junegunn/seoul256.vim'
Plug 'nlknguyen/papercolor-theme'

" TOOLS
Plug 'terryma/vim-multiple-cursors'
Plug 'easymotion/vim-easymotion'
Plug 'airblade/vim-gitgutter'
Plug 'raimondi/delimitmate'
Plug 'bling/vim-bufferline'
Plug 'majutsushi/tagbar'
Plug 'benmills/vimux'

Plug 'hrsh7th/nvim-cmp'
Plug 'hrsh7th/vim-vsnip'
Plug 'hrsh7th/cmp-nvim-lsp'
Plug 'neovim/nvim-lspconfig'
Plug 'nvim-lua/completion-nvim'
Plug 'nvim-lua/plenary.nvim'
Plug 'nvim-telescope/telescope.nvim'
Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}

" INTERFACE
Plug 'kyazdani42/nvim-web-devicons'
Plug 'nvim-lualine/lualine.nvim'
Plug 'akinsho/bufferline.nvim'

call plug#end()


:lua << EOF

require'telescope'.setup{
    defaults = { file_ignore_patterns = {"node_modules"} }
}

require'nvim-treesitter.configs'.setup{
    ensure_installed = "maintained",
    highlight = {
        enable = true
    },
    indent = {
        enable = true
    }
}

require'lualine'.setup{
	options = { theme = 'PaperColor' }
}

require'bufferline'.setup{}

local cmp = require'cmp'

cmp.setup({
    snippet = {
        expand = function(args)
            vim.fn["vsnip#anonymous"](args.body)
        end
    },
    mapping = {
        ['<C-q>'] = cmp.mapping(cmp.mapping.scroll_docs(-4), {'i','c'}),
        ['<C-e>'] = cmp.mapping(cmp.mapping.scroll_docs(4), {'i','c'}),
        ['<C-Space>'] = cmp.mapping(cmp.mapping.complete(), {'i','c'}),
        ['<C-y>'] = cmp.config.disable,
        ['<C-a>'] = cmp.mapping({
            i = cmp.mapping.abort(),
            c = cmp.mapping.close(),
        }),
        ['<CR>'] = cmp.mapping.confirm({ select = true }),
    },
    sources = cmp.config.sources({
        { name = 'nvim_lsp' },
        { name = 'vsnip' }
    }, {
        { name = 'buffer' },
    })
})

local capabilities = require('cmp_nvim_lsp').update_capabilities(vim.lsp.protocol.make_client_capabilities())
require'lspconfig'.clangd.setup{
    capabilities = capabilities
}
require'lspconfig'.hls.setup{
    capabilities = capabilities
}
require'lspconfig'.pyright.setup{
    capabilities = capabilities
}
require'lspconfig'.rust_analyzer.setup{
    capabilities = capabilities
}
require'lspconfig'.solargraph.setup{
    capabilities = capabilities
}
require'lspconfig'.texlab.setup{
    capabilities = capabilities
}
require'lspconfig'.tsserver.setup{
    capabilities = capabilities
}

EOF

autocmd BufEnter * lua require'completion'.on_attach()

nnoremap <c-f> :Telescope find_files<CR>
nnoremap <silent>[b :BufferLineCycleNext<CR>
nnoremap <silent>b] :BufferLineCyclePrev<CR>
nmap ]h <Plug>(GitGutterNextHunk)
nmap [h <Plug>(GitGutterPrevHunk)
nmap <F8> :TagbarToggle<CR>

" Default mapping
let g:multi_cursor_start_word_key      = '<C-n>'
let g:multi_cursor_select_all_word_key = '<A-n>'
let g:multi_cursor_start_key           = 'g<C-n>'
let g:multi_cursor_select_all_key      = 'g<A-n>'
let g:multi_cursor_next_key            = '<C-n>'
let g:multi_cursor_prev_key            = '<C-p>'
let g:multi_cursor_skip_key            = '<C-x>'
let g:multi_cursor_quit_key            = '<Esc>'

let g:PaperColor_Theme_Options = {
	\ 'theme': {
	\ 	'default': {
	\  		'allow_bold': 1,
	\ 		'allow_italic': 1
	\  		}
	\ 	}
	\ }

if $TERM_PROGRAM == "Apple_Terminal"
	set background=light
	colorscheme PaperColor
endif
